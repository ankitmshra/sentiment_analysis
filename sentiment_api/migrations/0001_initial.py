# Generated by Django 5.2.4 on 2025-08-05 04:16

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.IntegerField(help_text='Customer ID from external database', unique=True)),
                ('company_name', models.CharField(help_text='Company name', max_length=255)),
                ('industry', models.CharField(help_text='Industry sector', max_length=100)),
                ('contact_person', models.CharField(help_text='Name of contact person', max_length=255)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=20, null=True)),
                ('address', models.TextField(blank=True, help_text='Company address', null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text='State/Province', max_length=100, null=True)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=20, null=True)),
                ('created_at', models.DateTimeField(help_text='When customer was created in external DB')),
                ('updated_at', models.DateTimeField(help_text='When customer was last updated in external DB')),
                ('synced_at', models.DateTimeField(auto_now=True, help_text='When this record was last synced')),
                ('is_active', models.BooleanField(default=True, help_text='Whether customer is active')),
            ],
            options={
                'db_table': 'customers',
                'ordering': ['company_name'],
                'indexes': [models.Index(fields=['customer_id'], name='customers_custome_b85ebb_idx'), models.Index(fields=['industry'], name='customers_industr_c7688c_idx'), models.Index(fields=['company_name'], name='customers_company_c25c85_idx'), models.Index(fields=['created_at'], name='customers_created_c63477_idx')],
            },
        ),
        migrations.CreateModel(
            name='IndustryBaseline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('industry', models.CharField(help_text='Industry name', max_length=100, unique=True)),
                ('baseline_sentiment', models.FloatField(help_text='Expected baseline sentiment for this industry', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('fn_fp_ratio_baseline', models.FloatField(help_text='Expected FN/FP ratio for this industry')),
                ('volatility_factor', models.FloatField(default=1.0, help_text='Industry volatility factor (higher = more volatile sentiment)')),
                ('description', models.TextField(blank=True, help_text='Description of this industry baseline')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this baseline is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'industry_baselines',
                'ordering': ['industry'],
                'indexes': [models.Index(fields=['industry'], name='industry_ba_industr_076f14_idx'), models.Index(fields=['is_active'], name='industry_ba_is_acti_ccf1bc_idx')],
            },
        ),
        migrations.CreateModel(
            name='OverallSentiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this overall analysis', unique=True)),
                ('total_customers', models.IntegerField(help_text='Total number of active customers')),
                ('total_fn_count', models.IntegerField(help_text='Total FN reports across all customers')),
                ('total_fp_count', models.IntegerField(help_text='Total FP reports across all customers')),
                ('overall_sentiment', models.FloatField(help_text='Overall sentiment score across all customers', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('weighted_sentiment', models.FloatField(help_text='Sentiment weighted by customer activity/importance', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sentiment_variance', models.FloatField(help_text='Variance in sentiment across customers')),
                ('trend_direction', models.CharField(choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable')], help_text='Overall trend direction', max_length=20)),
                ('top_performing_segment', models.CharField(help_text='Industry segment with highest sentiment', max_length=100)),
                ('lowest_performing_segment', models.CharField(help_text='Industry segment with lowest sentiment', max_length=100)),
                ('calculation_window_hours', models.IntegerField(default=24, help_text='Hours of data used in calculation')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this analysis was performed')),
            ],
            options={
                'db_table': 'overall_sentiment',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['created_at'], name='overall_sen_created_6c5a92_idx'), models.Index(fields=['overall_sentiment'], name='overall_sen_overall_266a80_idx')],
            },
        ),
        migrations.CreateModel(
            name='SegmentSentiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this segment analysis', unique=True)),
                ('segment', models.CharField(help_text='Industry segment name', max_length=100)),
                ('total_customers', models.IntegerField(help_text='Number of customers in this segment')),
                ('total_fn_count', models.IntegerField(help_text='Total FN reports for this segment')),
                ('total_fp_count', models.IntegerField(help_text='Total FP reports for this segment')),
                ('average_sentiment', models.FloatField(help_text='Average sentiment score for this segment', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('median_sentiment', models.FloatField(help_text='Median sentiment score for this segment', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sentiment_std_dev', models.FloatField(help_text='Standard deviation of sentiment scores')),
                ('trend_direction', models.CharField(choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable')], help_text='Trend direction for this segment', max_length=20)),
                ('calculation_window_hours', models.IntegerField(default=24, help_text='Hours of data used in calculation')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this analysis was performed')),
            ],
            options={
                'db_table': 'segment_sentiment',
                'ordering': ['-created_at', 'segment'],
                'indexes': [models.Index(fields=['segment', 'created_at'], name='segment_sen_segment_a35ee2_idx'), models.Index(fields=['average_sentiment'], name='segment_sen_average_889683_idx'), models.Index(fields=['created_at'], name='segment_sen_created_65b2ef_idx')],
            },
        ),
        migrations.CreateModel(
            name='SentimentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this sentiment calculation', unique=True)),
                ('sentiment_score', models.FloatField(help_text='Sentiment score between 0.0 (very negative) and 1.0 (very positive)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('algorithm_used', models.CharField(help_text='Algorithm used for calculation', max_length=50)),
                ('calculation_window_hours', models.IntegerField(default=24, help_text='Hours of data used in calculation')),
                ('fn_count_used', models.IntegerField(help_text='Total FN count used in calculation')),
                ('fp_count_used', models.IntegerField(help_text='Total FP count used in calculation')),
                ('trend_direction', models.CharField(choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable')], help_text='Trend direction compared to previous calculation', max_length=20)),
                ('confidence_score', models.FloatField(help_text='Confidence in this sentiment score (0.0 = low, 1.0 = high)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this sentiment was calculated')),
                ('customer', models.ForeignKey(help_text='Customer this sentiment score is for', on_delete=django.db.models.deletion.CASCADE, to='sentiment_api.customer')),
            ],
            options={
                'db_table': 'sentiment_scores',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['customer', 'created_at'], name='sentiment_s_custome_21a0e9_idx'), models.Index(fields=['sentiment_score'], name='sentiment_s_sentime_d7296f_idx'), models.Index(fields=['created_at'], name='sentiment_s_created_b7abe5_idx'), models.Index(fields=['algorithm_used'], name='sentiment_s_algorit_1f4524_idx')],
            },
        ),
        migrations.CreateModel(
            name='SyncJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, help_text='Unique job identifier', unique=True)),
                ('window_start', models.DateTimeField(help_text='Start of the 1-hour window being processed')),
                ('window_end', models.DateTimeField(help_text='End of the 1-hour window being processed')),
                ('fn_count', models.IntegerField(default=0, help_text='False Negative count for this window', validators=[django.core.validators.MinValueValidator(0)])),
                ('fp_count', models.IntegerField(default=0, help_text='False Positive count for this window', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Job status', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if job failed', null=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When job started processing', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When job completed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When job was created')),
                ('customer', models.ForeignKey(help_text='Customer this job is for', on_delete=django.db.models.deletion.CASCADE, to='sentiment_api.customer')),
            ],
            options={
                'db_table': 'sync_jobs',
                'ordering': ['-window_start'],
                'indexes': [models.Index(fields=['customer', 'window_start'], name='sync_jobs_custome_f58bc4_idx'), models.Index(fields=['status'], name='sync_jobs_status_4165fd_idx'), models.Index(fields=['window_start', 'window_end'], name='sync_jobs_window__8a42e4_idx'), models.Index(fields=['created_at'], name='sync_jobs_created_e9f271_idx')],
                'unique_together': {('customer', 'window_start', 'window_end')},
            },
        ),
    ]
