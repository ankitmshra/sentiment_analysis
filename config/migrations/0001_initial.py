# Generated by Django 5.2.4 on 2025-08-05 04:16

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Configuration name (e.g., 'production', 'staging')", max_length=100, unique=True)),
                ('host', models.CharField(help_text='Database host', max_length=255)),
                ('port', models.IntegerField(default=5432, help_text='Database port', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('database_name', models.CharField(help_text='Database name', max_length=100)),
                ('username', models.CharField(help_text='Database username', max_length=100)),
                ('password', models.CharField(help_text='Database password', max_length=255)),
                ('connection_timeout', models.IntegerField(default=30, help_text='Connection timeout in seconds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('max_connections', models.IntegerField(default=10, help_text='Maximum number of connections', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default configuration')),
                ('last_tested', models.DateTimeField(blank=True, help_text='When this configuration was last tested', null=True)),
                ('test_status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('pending', 'Pending'), ('not_tested', 'Not Tested')], default='not_tested', help_text='Status of last connection test', max_length=20)),
                ('test_error_message', models.TextField(blank=True, help_text='Error message from last failed test', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'database_configs',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='database_co_name_46c7d2_idx'), models.Index(fields=['is_active'], name='database_co_is_acti_49a74e_idx'), models.Index(fields=['is_default'], name='database_co_is_defa_d847f4_idx')],
            },
        ),
        migrations.CreateModel(
            name='JobConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Configuration name', max_length=100, unique=True)),
                ('sync_interval_minutes', models.IntegerField(default=60, help_text='Interval between sync jobs in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('sync_batch_size', models.IntegerField(default=1000, help_text='Number of records to process per batch', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('sentiment_delay_minutes', models.IntegerField(default=5, help_text='Delay after sync before sentiment calculation (minutes)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('segment_delay_minutes', models.IntegerField(default=10, help_text='Delay after sentiment calc before segment analysis (minutes)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('overall_delay_minutes', models.IntegerField(default=15, help_text='Delay after segment analysis before overall analysis (minutes)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('max_retries', models.IntegerField(default=3, help_text='Maximum number of job retries', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('retry_delay_minutes', models.IntegerField(default=5, help_text='Delay between retries in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('cleanup_old_jobs_days', models.IntegerField(default=30, help_text='Days to keep old job records', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'job_configs',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='job_configs_name_650470_idx'), models.Index(fields=['is_active'], name='job_configs_is_acti_d56011_idx'), models.Index(fields=['is_default'], name='job_configs_is_defa_c9d33d_idx')],
            },
        ),
        migrations.CreateModel(
            name='SentimentConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Configuration name', max_length=100, unique=True)),
                ('default_algorithm', models.CharField(choices=[('simple_ratio', 'Simple Ratio'), ('weighted_average', 'Weighted Average'), ('trend_adjusted', 'Trend Adjusted'), ('industry_normalized', 'Industry Normalized')], default='weighted_average', help_text='Default sentiment calculation algorithm', max_length=50)),
                ('default_window_hours', models.IntegerField(default=24, help_text='Default calculation window in hours', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(168)])),
                ('time_decay_factor', models.FloatField(default=0.9, help_text='Time decay factor for weighted average (0.1-1.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('trend_weight', models.FloatField(default=0.2, help_text='Weight given to trend in calculation (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('min_reports_for_confidence', models.IntegerField(default=10, help_text='Minimum reports needed for high confidence score', validators=[django.core.validators.MinValueValidator(1)])),
                ('enable_industry_normalization', models.BooleanField(default=True, help_text='Whether to normalize scores against industry baselines')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'sentiment_configs',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='sentiment_c_name_b42568_idx'), models.Index(fields=['is_active'], name='sentiment_c_is_acti_fb515e_idx'), models.Index(fields=['is_default'], name='sentiment_c_is_defa_982b7c_idx')],
            },
        ),
    ]
